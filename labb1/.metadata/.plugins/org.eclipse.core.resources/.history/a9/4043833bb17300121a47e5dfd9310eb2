
/**
 * 
 * @author Filip Gauffin, filipgau@kth.se
 *
 * Holds the prefixsum-representation of an array.
 * Supports insertion (change of element) and sum of all 
 * elements with smaller index then some given index.
 *
 */
public class PrefixSum {
	private int[] i;
	private int counter = 0;
	
	/**
	 * New PrefixSum using array i
	 * 
	 * @param i
	 */
	public PrefixSum(int[] i){
		this.i = i;
	}
	/**
	 * New PrefixSum with array of length size
	 * 
	 * @param size
	 */
	public PrefixSum(int size){
		i = new int[size];
	}
	/**
	 * Add element elem to array in next available spot
	 * 
	 * @param elem
	 */
	public void addElem(int elem){
		i[counter] = elem;
		counter++;
	}
	/**
	 * Add delta to int at position last by updating each dependent node in the tree
	 * 
	 * @param last
	 * @param delta
	 */
	public void add(int last, int delta){
		// 
		while(last < i.length){
			i[last] += delta;
			last |= last + 1;
		}
		print(i);
	}
	/**
	 * Sum each number starting from given last index (excluding) to first element in the list.
	 * 
	 * @param last
	 * @return
	 */
	public int sum(int last){
		int sum = 0;
		last--;
		while(last >= 0){
			sum += i[last];
			last = (last & (last + 1)) - 1;
		}
		return sum;
	}
	/**
	 * Print contents of list l
	 * 
	 * @param l
	 */
	private static void print(int[] l){
		System.out.print("{ ");
		for(int i = 0; i < l.length; i++){
			System.out.print(l[i] + " ");
		}
		System.out.println(" }");
	}
}
