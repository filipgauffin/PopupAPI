import java.util.ArrayList;

/**
 * 
 * @author Filip Gauffin, filipgau@kth.se
 *
 * Finds the positions of a pattern within a text by using the Knuth-Morris-Pratt algorithm
 *
 */
public class StringMatching {
	
	/**
	 * Check the text for the given pattern. Uses an array p to determine if 
	 * part of a failed try to match could contain the start of the pattern, if not skip the 
	 * already searched part.
	 * 
	 * @param pattern
	 * @param text
	 * @return indices of occurence
	 */
	public static ArrayList<Integer> find(String pattern, String text){
		ArrayList<Integer> res = new ArrayList<Integer>();
		int[] p = prefix(pattern);
		
		int q = 0; 
		for(int i = 0; i < text.length(); i++){
			while(q >= 0 && pattern.charAt(q) != text.charAt(i)){
				q = p[q];
			}
			q++;
			if(q >= pattern.length()){
				res.add(i - q + 1);
				//q = p[q];
			}
		}
		
		return res;
	}
	public ArrayList<Integer> find(ArrayList<String> pattern, String text){
		
		return null;
	}
	/**
	 * Pre-process the pattern by finding matches within the string to avoid backtracking 
	 * on the text to be searched.
	 * 
	 * @param pattern
	 * @return
	 */
	private static int[] prefix(String pattern){
		int[] t = new int[22222];
		t[0] = -1;
		int k = -1;
		for(int i = 0; i < pattern.length()-1; i++){
			while(k >= 0 && pattern.charAt(k+1) != pattern.charAt(i)){
				k = t[k];
			}
			k++;
			if(pattern.charAt(k) == pattern.charAt(i+1)){
				t[i+1] = t[k];
			}
			else{
				t[i+1] = k;
			}
		}
		return t;
	}
}
