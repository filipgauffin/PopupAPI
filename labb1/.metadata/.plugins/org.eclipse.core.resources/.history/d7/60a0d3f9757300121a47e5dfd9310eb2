
/**
 * 
 * @author Filip Gauffin, filipgau@kth.se
 *
 */
public class PrefixSum {
	private int[] i;
	private int counter = 0;
	private int greatest_num = 0;
	private int size;
	
	/**
	 * New PrefixSum with array i
	 * 
	 * @param i
	 */
	public PrefixSum(int[] i){
		this.i = i;
		size = size(i.length);
	}
	/**
	 * New PrefixSum with array of length size
	 * 
	 * @param size
	 */
	public PrefixSum(int size){
		this.size = size(size);
		i = new int[this.size];
	}
	/**
	 * Add element elem to array in next available spot
	 * 
	 * @param elem
	 */
	public void addElem(int elem){
		i[counter] = elem;
		counter++;
	}
	/**
	 * Add delta to int at position last
	 * 
	 * @param last
	 * @param delta
	 */
	public void add(int last, int delta){
		if(last == size - 1){
			greatest_num += delta;
		}
		else{
			int ind = size + last;
			int next;
			while(ind > 1){
				next = ind / 2;
				if(ind % 2 == 0){
					i[next] += delta;
				}
				ind = next;
			}
		}
	}
	/**
	 * Sum each number starting from last to first.
	 * 
	 * @param last
	 * @return
	 */
	public int sum(int last){
		int sum = 0;
		int ind;
		if(last == size - 1){
			sum = greatest_num;
			ind = size + last-1;
		}
		else{
			sum = 0;
			ind = size + last;
		}
		int next;
		while(ind > 1){
			next = ind / 2;
			if(ind % 2 == 1){
				sum += i[next];
			}
			ind = next;
		}
		return sum;
	}
	/**
	 * Return 2^x so that 2^(x-1) < size < 2^x
	 * 
	 * @param size
	 * @return
	 */
	private int size(int size){
		int saved = size;
		int new_size = 1;
		/**
		 * Ugly but does the trick in at most 32 turns
		 */
		while(new_size < size){
			new_size <<= 1; 
		}
		return size;
	}
}
