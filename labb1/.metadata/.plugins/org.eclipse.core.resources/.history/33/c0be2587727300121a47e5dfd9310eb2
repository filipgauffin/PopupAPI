import java.util.HashMap;


public class Trie<T> {
	
	private Node<T> root = new Node<T>(' ');
	
	public Trie(){
	
	}
	public void insert(String s){
		Node<T> n = root;
		for(int i = 0; i < s.length(); i++){
			n = n.setChild(s.charAt(i));
		}
		n.setWordEnd(true);
	}
	public void insertWord(String s, T word){
		Node<T> n = root;
		for(int i = 0; i < s.length(); i++){
			n = n.setChild(s.charAt(i));
		}
		n.setWordEnd(true);
		n.setWord(word);
	}
	public boolean find(String s){
		Node<T> n = root;
		for(int i = 0; i < s.length(); i++){
			n = n.child(s.charAt(i));
			if(n == null){
				return false;
			}
		}
		if(n.isWordEnd()) return true;
		return false;
	}
	public boolean find(String s){
		Node<T> n = root;
		for(int i = 0; i < s.length(); i++){
			n = n.child(s.charAt(i));
			if(n == null){
				return false;
			}
		}
		if(n.isWordEnd()) return true;
		return false;
	}
	
	private class Node<T>{
		private char c;
		private boolean wordEnd = false;
		private T word;
		private HashMap<Character, Node<T>> children;
		
		public Node(char c){
			children = new HashMap<Character, Node<T>>();
			this.c = c;
		}
		public Node<T> child(char c){
			return children.get(c);
		}
		public Node<T> setChild(char c){
			if(children.containsKey(c)){
				return children.get(c);
			}
			Node<T> n = new Node<T>(c);
			
			children.put(c, n);
			return n;
		}
		
		public T getWord(){
			return word;
		}
		public void setWord(T word){
			this.word = word;
		}
		public int hashCode(){
			return c;
		}
		public boolean isWordEnd() {
			return wordEnd;
		}
		public void setWordEnd(boolean wordEnd) {
			this.wordEnd = wordEnd;
		}
	}
}
